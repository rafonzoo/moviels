{"version":3,"sources":["app/footer.js","app/header.js","app/home/title.js","app/movie/hero.js","api/tmdb.js","api/feeds.js","app/home/latest.js","utils/helper.js","app/home/trends.js","app/main.js","App.js","serviceWorker.js","index.js"],"names":["AppFooter","AppHeader","HomeTitle","props","className","title","MovieHero","TMDB_KEY","TMDB_API","TYPE","a","STRING_QUERY","STRING_DEFAULT","STRING_DISCOVER","STRING_APIKEY","fetch","response","json","discover","LatestCardMatch","match","useRouteMatch","path","to","exact","activeOnlyWhenExact","dynamicRoutes","isPrevented","isActivated","item","poster_path","imageURL","TMDB_IMG","data-src","data-bg-load","data-prevent","onClick","e","currentTarget","classList","contains","preventDefault","LatestCardLink","observer","IntersectionObserver","entries","observe","forEach","entry","isIntersecting","dataSrc","target","getAttribute","style","backgroundImage","setAttribute","unobserve","setTimeout","removeAttribute","nodeList","document","querySelectorAll","Array","slice","call","lazy","LazyBackground","cleanURL","slugify","this","isExact","index","type","React","Component","LatestCardLoop","data","map","movie","i","itemList","id","key","itemGap","Fragment","length","LatestWrapper","state","then","setState","results","console","log","CSS","supports","tabIndex","HomeLatest","HomeTrends","AppMain","App","Boolean","window","location","hostname","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"mOAUeA,MARf,WACE,OACE,gCACE,gCCKSC,MARf,WACE,OACE,gCACE,gC,8BCKSC,MARf,SAAmBC,GACjB,OACE,yBAAKC,UAAU,SACb,4BAAMD,EAAME,SCGHC,MANf,WACE,OACE,sC,0CCJSC,EAAW,mCAEXC,EAAW,8B,4CCIxB,WAAwBC,GAAxB,mCAAAC,EAAA,6DAA8BC,EAA9B,+BAA6C,GACrCC,EAAiBJ,EDJD,ICKhBK,EAAkB,aAAeJ,EACjCK,EAAgB,YAAcP,EAHtC,SAKyBQ,MACrBH,EACAC,EACAC,EACAH,GATJ,cAKQK,EALR,gBAYeA,EAASC,OAZxB,qF,sBAeeC,M,qECVf,SAASC,EAAgBhB,GACvB,IACMiB,EAAQC,YAAc,CAC1BC,KAFkB,WAEEnB,EAAMoB,GAC1BC,MAAOrB,EAAMsB,sBAGTC,EANc,WAMgBvB,EAAMoB,GACpCI,EAAcP,EAAQ,OAAS,QAC/BQ,EAAc,aAAeR,EAAQ,UAAY,IATzB,EAWCjB,EAAM0B,KAA7BC,EAXsB,EAWtBA,YAAazB,EAXS,EAWTA,MACf0B,EAAWC,kCAAoBF,EAQrC,OACE,kBAAC,IAAD,CACEP,GAAKG,EACLrB,MAAQA,EACR4B,WAAWF,EACXG,eAAa,QACbC,eAAeR,EACfvB,UAAYwB,EACZQ,QAdoB,SAAAC,GACtB,GAAIA,EAAEC,cAAcC,UAAUC,SAAS,UACrC,OAAOH,EAAEI,mBAcT,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOjB,OAAK,EAACF,KA9BC,YA+BZ,yBAAKlB,UAAU,gBAAiBC,IAElC,kBAAC,IAAD,CAAOiB,KAAOI,GACZ,yBAAKtB,UAAU,wBACb,kBAAC,EAAD,U,IAQNsC,E,kLAEF,OCzDG,WACL,IAAMC,EAAW,IAAIC,sBAAqB,SAACC,EAASC,GAClDD,EAAQE,SAAQ,SAAAC,GACd,GAAIA,EAAMC,eAAgB,CACxB,IAAMC,EAAUF,EAAMG,OAAOC,aAAa,YAC1CJ,EAAMG,OAAOE,MAAMC,gBAAnB,cAA4CJ,EAA5C,KACAF,EAAMG,OAAOI,aAAa,eAAgB,QAC1CZ,EAASa,UAAUR,EAAMG,QAEzBM,YAAW,WACTT,EAAMG,OAAOO,gBAAgB,cAC5B,YAKHC,EAAWC,SAASC,iBAAiB,kBAG3C,OAFiB,KAAMC,GAAiBC,MAAMC,KAAKL,GAEpCZ,SAAQ,SAAAkB,GAAI,OAAItB,EAASG,QAAQmB,MDsCvCC,K,+BAIP,IAAMC,EAAWC,IAAQC,KAAKlE,MAAM0B,KAAKxB,OACnCiE,EAA+B,IAArBD,KAAKlE,MAAMoE,MAE3B,OACE,yBAAKnE,UAAU,QACb,kBAAC,IAAD,KACE,kBAACe,EAAD,CACEI,GAAK,WAAI8C,KAAKlE,MAAMqE,KAAf,KAAyBL,EAC9B1C,oBAAsB6C,EACtBzC,KAAOwC,KAAKlE,MAAM0B,a,GAfD4C,IAAMC,WAuBnC,SAASC,EAAexE,GACtB,OAAOA,EAAMyE,KAAKC,KAAI,SAACC,EAAOC,GAE5B,IAAMC,EACJ,wBAAIC,GAAI,OAASF,EAAG3E,UAAU,YAAY8E,IAAKH,GAC7C,kBAAC,EAAD,CAAgBlD,KAAOiD,EAAQN,KAAMrE,EAAMqE,KAAMD,MAAOQ,KAItDI,EAAU,yBAAK/E,UAAU,YAE/B,OAAU,IAAN2E,EACF,kBAAC,IAAMK,SAAP,CAAgBF,IAAKH,GACjBI,EAAWH,GAIbD,IAAM5E,EAAMyE,KAAKS,OAAS,EAC5B,kBAAC,IAAMD,SAAP,CAAgBF,IAAKH,GACjBC,EAAYG,GAIXH,K,IAILM,E,kDACJ,WAAYnF,GAAQ,IAAD,8BACjB,cAAMA,IACDoF,MAAQ,CACXf,KAAM,KACNM,MAAO,IAJQ,E,gEAQE,IAAD,OAClBrB,YAAW,WACTvC,EAAS,EAAKf,MAAMqE,MAAMgB,MAAK,SAAAZ,GAC7B,EAAKa,SAAS,CACZX,MAAOF,EAAKc,QAAQ3B,MAAM,EAAG,IAC7BS,KAAM,EAAKrE,MAAMqE,YAGpB,O,+BAIH,GAAgC,IAA5BH,KAAKkB,MAAMT,MAAMO,OACnB,OACE,yBAAKjF,UAAY,QAAUiE,KAAKlE,MAAMqE,MACpC,wBAAIpE,UAAU,mBAKlBuF,QAAQC,IAAIvB,KAAKkB,MAAMT,OAYvB,OACE,yBAAK1E,UAAY,QAAUiE,KAAKlE,MAAMqE,MACpC,wBAAIpE,UAAY,SARdyF,IAAIC,SAAS,4BACR,cACA,kBAMkCC,UAAW,GAClD,kBAACpB,EAAD,CACEC,KAAMP,KAAKkB,MAAMT,MACjBN,KAAMH,KAAKkB,MAAMf,a,GA9CHC,IAAMC,WAqEnBsB,MAbf,WACE,OACE,6BAAS5F,UAAU,4BACjB,yBAAKA,UAAU,WACb,kBAAC,IAAMgF,SAAP,KACE,kBAAC,EAAD,CAAW/E,MAAM,aACjB,kBAAC,EAAD,CAAemE,KAAK,cEjKfyB,MAJf,WACE,OAAO,+BCcMC,E,uKAXX,OACE,8BACE,kBAAC,IAAMd,SAAP,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,Y,GANYX,IAAMC,WCWbyB,MAVf,WACE,OACE,kBAAC,IAAMf,SAAP,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QCEcgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASnF,MACvB,2DCZNoF,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEF9C,SAAS+C,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtB,MAAK,SAACuB,GACLA,EAAaC,gBAEdC,OAAM,SAACC,GACNvB,QAAQuB,MAAMA,EAAMC,c","file":"static/js/main.622989b3.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction AppFooter() {\n  return (\n    <footer>\n      <div></div>\n    </footer>\n  );\n}\n\nexport default AppFooter;\n","import React from \"react\";\n\nfunction AppHeader() {\n  return (\n    <header>\n      <nav></nav>\n    </header>\n  );\n}\n\nexport default AppHeader;\n","import React from 'react';\r\n\r\nfunction HomeTitle(props) {\r\n  return (\r\n    <div className=\"title\">\r\n      <h2>{ props.title }</h2>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default HomeTitle;","import React from 'react';\r\n\r\nfunction MovieHero() {\r\n  return (\r\n    <div>YEAY</div>\r\n  );\r\n}\r\n\r\nexport default MovieHero;","export const TMDB_KEY = '5673a9d0ca3849596ce2819071a4709d';\r\nexport const TMDB_IMG = 'https://image.tmdb.org/t/p/';\r\nexport const TMDB_API = 'https://api.themoviedb.org/';\r\nexport const TMDB_VER = '3';","import {\n  TMDB_API,\n  TMDB_VER,\n  TMDB_KEY\n} from './tmdb.js';\n\nasync function discover(TYPE, STRING_QUERY = '') {\n  const STRING_DEFAULT = TMDB_API + TMDB_VER;\n  const STRING_DISCOVER = '/discover/' + TYPE;\n  const STRING_APIKEY = '?api_key=' + TMDB_KEY;\n\n  const response = await fetch(\n    STRING_DEFAULT +\n    STRING_DISCOVER +\n    STRING_APIKEY +\n    STRING_QUERY\n  );\n  \n  return await response.json();\n}\n\nexport default discover;","import React from 'react';\nimport HomeTitle from './title.js';\nimport MovieHero from '../movie/hero';\nimport slugify from '@sindresorhus/slugify';\nimport discover from '../../api/feeds.js';\nimport { TMDB_IMG } from '../../api/tmdb.js';\nimport { LazyBackground } from '../../utils/helper.js';\nimport { Link, Switch, BrowserRouter, Route, useRouteMatch } from 'react-router-dom';\n\nimport \"../../style/section.scss\";\n\nfunction LatestCardMatch(props) {\n  const currentRoot = \"/moviels\";\n  const match = useRouteMatch({\n    path: currentRoot + props.to,\n    exact: props.activeOnlyWhenExact\n  });\n\n  const dynamicRoutes = currentRoot + props.to;\n  const isPrevented = match ? \"true\" : \"false\";\n  const isActivated = \"card-link\" + (match ? \" active\" : \"\");\n\n  const { poster_path, title } = props.item;\n  const imageURL = TMDB_IMG + 'w500' + poster_path;\n\n  const preventIfActive = e => {\n    if (e.currentTarget.classList.contains('active')) {\n      return e.preventDefault();\n    }\n  };\n\n  return (\n    <Link\n      to={ dynamicRoutes }\n      title={ title }\n      data-src={ imageURL }\n      data-bg-load=\"false\"\n      data-prevent={ isPrevented }\n      className={ isActivated }\n      onClick={ preventIfActive }\n    >\n      <Switch>\n        <Route exact path={ currentRoot }>\n          <div className=\"card-content\">{ title }</div>\n        </Route>\n        <Route path={ dynamicRoutes }>\n          <div className=\"card-content callout\">\n            <MovieHero />\n          </div>\n        </Route>\n      </Switch>\n    </Link>\n  );\n}\n\nclass LatestCardLink extends React.Component {\n  componentDidMount() {\n    return LazyBackground();\n  }\n\n  render() {\n    const cleanURL = slugify(this.props.item.title);\n    const isExact = this.props.index === 0 ? true : false;\n  \n    return (\n      <div className=\"card\">\n        <BrowserRouter>\n          <LatestCardMatch\n            to={ `/${this.props.type}/` + cleanURL }\n            activeOnlyWhenExact={ isExact }\n            item={ this.props.item }\n          />\n        </BrowserRouter>\n      </div>\n    );\n  }\n}\n\nfunction LatestCardLoop(props) {\n  return props.data.map((movie, i) => {\n\n    const itemList = (\n      <li id={'ltc-' + i} className=\"list-item\" key={i}>\n        <LatestCardLink item={ movie } type={props.type} index={i} />\n      </li>\n    );\n\n    const itemGap = <div className=\"devider\"></div>;\n\n    if (i === 0) return (\n      <React.Fragment key={i}>\n        { itemGap }{ itemList }\n      </React.Fragment>\n    );\n\n    if (i === props.data.length - 1) return (\n      <React.Fragment key={i}>\n        { itemList }{ itemGap }\n      </React.Fragment>\n    );\n\n    return itemList;\n  });\n}\n\nclass LatestWrapper extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      type: null,\n      movie: [],\n    }\n  }\n\n  componentDidMount() {\n    setTimeout(() => {\n      discover(this.props.type).then(data => {\n        this.setState({\n          movie: data.results.slice(0, 10),\n          type: this.props.type,\n        });\n      });\n    }, 1000);\n  }\n\n  render() {\n    if (this.state.movie.length === 0) {\n      return (\n        <div className={ 'item ' + this.props.type }>\n          <ul className=\"list fetching\"></ul>\n        </div>\n      );\n    } else {\n\n      console.log(this.state.movie);\n\n      // DETECT IF CURRENT BROWSER SUPPORT SNAPSCROLL\n      // OVER JAVASCRIPT. THE DETECTION FEATURE OF THE\n      // SNAPSCROLL ALSO USED IN @SUPPORT CSS FEATURE.\n      const scrollSnap = () => {\n        if (CSS.supports('scroll-snap-align: start')) {\n          return 'scroll-snap'; } else {\n          return 'no-scroll-snap';\n        }\n      }\n\n      return (\n        <div className={ 'item ' + this.props.type }>\n          <ul className={ 'list ' + scrollSnap() } tabIndex={-1}>\n            <LatestCardLoop\n              data={this.state.movie}\n              type={this.state.type}\n            />\n          </ul>\n        </div>\n      );\n    }\n\n  }\n}\n\nfunction HomeLatest() {\n  return (\n    <section className=\"section section-discover\">\n      <div className=\"content\">\n        <React.Fragment>\n          <HomeTitle title=\"Discover\" />\n          <LatestWrapper type=\"movie\" />\n        </React.Fragment>\n      </div>\n    </section>\n  )\n}\n\nexport default HomeLatest;\n","export function LazyBackground() {\r\n  const observer = new IntersectionObserver((entries, observe) => {\r\n    entries.forEach(entry => {\r\n      if (entry.isIntersecting) {\r\n        const dataSrc = entry.target.getAttribute('data-src'); // @ts-ignore\r\n        entry.target.style.backgroundImage = `url(${dataSrc})`;\r\n        entry.target.setAttribute('data-bg-load', 'true');\r\n        observer.unobserve(entry.target);\r\n\r\n        setTimeout(() => {\r\n          entry.target.removeAttribute('data-src');\r\n        }, 300);\r\n      }\r\n    });\r\n  });\r\n\r\n  const nodeList = document.querySelectorAll('[data-bg-load]');\r\n  const toArray = ([] || Array.prototype).slice.call(nodeList);\r\n\r\n  return toArray.forEach(lazy => observer.observe(lazy));\r\n}","import React from \"react\";\n\nfunction HomeTrends() {\n  return <div></div>;\n}\n\nexport default HomeTrends;\n","import React from \"react\";\nimport HomeLatest from \"./home/latest\";\nimport HomeTrends from \"./home/trends\";\n\nclass AppMain extends React.Component {\n  render() {\n    return (\n      <main>\n        <React.Fragment>\n          <HomeLatest />\n          <HomeTrends />\n        </React.Fragment>\n      </main>\n    );\n  }\n}\n\nexport default AppMain;\n","import React from \"react\";\nimport AppFooter from \"./app/footer\";\nimport AppHeader from \"./app/header\";\nimport AppMain from \"./app/main\";\n\nfunction App() {\n  return (\n    <React.Fragment>\n      <AppHeader />\n      <AppMain />\n      <AppFooter />\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}